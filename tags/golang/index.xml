<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Golang on TsaiKD Blog</title>
    <link>https://tsaikd.org/blog/tags/golang/</link>
    <description>Recent content in Golang on TsaiKD Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 03 Feb 2015 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://tsaikd.org/blog/tags/golang/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Hack Hugo to GitHub compatiable</title>
      <link>https://tsaikd.org/blog/2015/02-03-hack-hugo-to-github-compatiable/</link>
      <pubDate>Tue, 03 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>https://tsaikd.org/blog/2015/02-03-hack-hugo-to-github-compatiable/</guid>
      <description>&lt;p&gt;在很久之前的文章(&lt;a href=&#34;../../2013/09-28-try-markdown-style-blog&#34;&gt;練習用 markdown 的形式來寫 blog&lt;/a&gt;)
裡面有提到用 &lt;a href=&#34;https://github.com/wendal/gor/&#34;&gt;gor&lt;/a&gt; 來產生靜態的 Blog 網站，不過最近有個叫 &lt;a href=&#34;http://gohugo.io/&#34;&gt;Hugo&lt;/a&gt; 的東西看起來好像比較
威猛一點，就花了一些時間試看看，雖然最後有達到基本的需求，不過中間花了不少時間在 Hack &lt;a href=&#34;http://gohugo.io/&#34;&gt;Hugo&lt;/a&gt;
&lt;code&gt;&amp;gt;&amp;quot;&amp;lt;&lt;/code&gt; ，紀錄一下修改的過程跟一些我自己想要的額外效果給大家參考。&lt;/p&gt;

&lt;p&gt;因為 &lt;a href=&#34;http://gohugo.io/&#34;&gt;Hugo&lt;/a&gt; 的改版還蠻快的，而且我不是很喜歡 git merge 的樹狀結構長的很醜，所以就附上
相關的 Patch 檔案，如果是直接看&lt;a href=&#34;https://github.com/tsaikd/hugo&#34;&gt;我的 GitHub Hugo&lt;/a&gt; 的話，那個 commit hash 是會一直變動的唷！&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;check-ext.patch&#34;&gt;檢查副檔名改成全用小寫檢查&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;因為有時後會遇到副檔名大小寫混用的情況，統一用小寫檢查比較方便。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;direct-handler.patch&#34;&gt;直接複製檔案到發布目錄&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://gohugo.io/&#34;&gt;Hugo&lt;/a&gt; 遇到不認識的副檔名會報錯，加個 handler 讓他把一些檔案直接丟到發布目錄裡面，
其實在 &lt;a href=&#34;http://gohugo.io/&#34;&gt;Hugo&lt;/a&gt; 的官方說明文件是要用一個 asset 的目錄去放奇奇怪怪的檔案的，但是我覺得
如果可以跟 &lt;a href=&#34;http://markdown.tw/&#34;&gt;Markdown&lt;/a&gt; 文件放在一起的話，還是比較方便，因為這樣就可以用相對路徑了。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;add-modtime.patch&#34;&gt;新增 ModTime 資訊&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://gohugo.io/&#34;&gt;Hugo&lt;/a&gt; 原本產生 &lt;a href=&#34;http://www.sitemaps.org/zh_TW/protocol.html&#34;&gt;Sitemap&lt;/a&gt; 的時間欄位是用文件內容提供的 &lt;code&gt;date&lt;/code&gt; 欄位，但是我覺
得應該要用，檔案系統上面的 modtime 資訊會比較好。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;relative-link.patch&#34;&gt;處理 GitHub 的 README.md&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;把 README.md 變成 index.html&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;add-hack-tool.patch&#34;&gt;批量修改相依性程式碼&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;因為有 Hack 一些程式碼，所以相依性的設定要一併修改，檔案很多，跑 script 比較快。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;這樣改完之後有幾個特點：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;目錄結構可以跟 GitHub 上一樣，舉例來說，目錄名稱是 URL 的一部分， README.md 就是 index.html

&lt;ul&gt;
&lt;li&gt;content

&lt;ul&gt;
&lt;li&gt;2015&lt;/li&gt;
&lt;li&gt;02-03-hack-hugo-to-github-compatiable

&lt;ul&gt;
&lt;li&gt;README.md&lt;/li&gt;
&lt;li&gt;check-ext.patch&lt;/li&gt;
&lt;li&gt;direct-handler.patch&lt;/li&gt;
&lt;li&gt;&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;從 GitHub 上面看也不會很奇怪

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/tsaikd/blog/tree/blog/2015/02-03-hack-hugo-to-github-compatiable&#34;&gt;https://github.com/tsaikd/blog/tree/blog/2015/02-03-hack-hugo-to-github-compatiable&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Sitemap 更新時間依照檔案的修改時間&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>GoLang Startup</title>
      <link>https://tsaikd.org/blog/2013/10-05-GoLang-Startup/</link>
      <pubDate>Sat, 05 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>https://tsaikd.org/blog/2013/10-05-GoLang-Startup/</guid>
      <description>

&lt;p&gt;最近看上了 &lt;a href=&#34;http://golang.org/&#34;&gt;golang&lt;/a&gt; 的速度跟整合 &lt;a href=&#34;https://github.com/&#34;&gt;github&lt;/a&gt; 的模式&lt;/p&gt;

&lt;p&gt;要來學一下 &lt;a href=&#34;http://golang.org/&#34;&gt;golang&lt;/a&gt; 了&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Compiler and Runtime
&lt;a href=&#34;https://code.google.com/p/go/downloads/list&#34;&gt;https://code.google.com/p/go/downloads/list&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Debugger
參考 &lt;a href=&#34;http://rongmayisheng.com/post/windows%E4%B8%8B%E7%94%A8eclipsegoclipse%E6%8F%92%E4%BB%B6gdb%E6%90%AD%E5%BB%BAgo%E8%AF%AD%E8%A8%80%E5%BC%80%E5%8F%91%E8%B0%83%E8%AF%95%E7%8E%AF%E5%A2%83&#34;&gt;windows下用eclipse+goclipse插件+gdb搭建go語言開發調試環境&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;直接抓 &lt;a href=&#34;http://code.google.com/p/golangide/downloads/list&#34;&gt;liteide Download&lt;/a&gt; 來用裡面內建的 gdb&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;IDE (Eclipse) (其實LiteIDE比較好用)&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;下載 &lt;a href=&#34;http://www.eclipse.org/downloads/&#34;&gt;http://www.eclipse.org/downloads/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;裝 plugin &lt;a href=&#34;https://code.google.com/p/goclipse/&#34;&gt;goclipse&lt;/a&gt;
&lt;a href=&#34;http://goclipse.googlecode.com/svn/trunk/goclipse-update-site/&#34;&gt;Update Site&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;設定 Preferences&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;另一個 IDE (LiteIDE)&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;下載 &lt;a href=&#34;https://code.google.com/p/golangide/&#34;&gt;https://code.google.com/p/golangide/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;設定環境變數, 不然自動補全的功能會失效

&lt;ol&gt;
&lt;li&gt;GOARCH=amd64&lt;/li&gt;
&lt;li&gt;GOOS=windows&lt;/li&gt;
&lt;li&gt;GOROOT=C:\Go\&lt;/li&gt;
&lt;li&gt;GOPATH=C:\GoPath\&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;開個 test go project&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main


import (
    &amp;quot;fmt&amp;quot;
)


func main() {
    fmt.Println(&amp;quot;golang&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;大功告成!!&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;不過用 gdb 來 debug 頗難用&lt;/p&gt;

&lt;p&gt;還是只好盡量寫小 function + unit test 吧&amp;hellip;@_@&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;剛剛突然發現 &lt;a href=&#34;https://code.google.com/p/golangide/&#34;&gt;liteide&lt;/a&gt; 還可以拿來寫 &lt;a href=&#34;http://markdown.tw/&#34;&gt;markdown&lt;/a&gt; 耶!!&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;參考資料:04c6e90faac2675aa89e2176d2eec7d8&#34;&gt;參考資料&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/astaxie/build-web-application-with-golang/blob/master/ebook/preface.md&#34;&gt;https://github.com/astaxie/build-web-application-with-golang/blob/master/ebook/preface.md&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/why404/gobook&#34;&gt;https://github.com/why404/gobook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://code.google.com/p/go-wiki/wiki/Projects&#34;&gt;https://code.google.com/p/go-wiki/wiki/Projects&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://golang.cat-v.org/pure-go-libs&#34;&gt;http://golang.cat-v.org/pure-go-libs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/shaoshing/train&#34;&gt;https://github.com/shaoshing/train&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;memory-buffer:04c6e90faac2675aa89e2176d2eec7d8&#34;&gt;Memory Buffer&lt;/h1&gt;

&lt;p&gt;支援 io.Reader, io.Writer&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;b := new(bytes.Buffer)
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;byte-array-to-string:04c6e90faac2675aa89e2176d2eec7d8&#34;&gt;Byte array to string&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// var b []byte
string(b[0:])
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;time-to-solr-date-format:04c6e90faac2675aa89e2176d2eec7d8&#34;&gt;Time to solr date format&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;time.Now().In(time.UTC).Format(&amp;quot;2006-01-02T15:04:05.000Z&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;goroutine-example:04c6e90faac2675aa89e2176d2eec7d8&#34;&gt;Goroutine Example&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;import (
	&amp;quot;fmt&amp;quot;
	&amp;quot;runtime&amp;quot;
	&amp;quot;time&amp;quot;
)

func Test_Goroutine() {
	// 假設有這些資料需要處理
	list := []int{5, 4, 3, 2, 1}

	// worker 的數量設成 CPU 的數量好像比較有效率?
	workernum := runtime.NumCPU()

	// in, out 的 channel 可以換成要處理的 struct, 這邊用 string 來當示範
	in, out := make(chan string, workernum), make(chan string, workernum)
	for i := 0; i &amp;lt; workernum; i++ {
		// 這個匿名函數就是真正要做事的地方
		go func() {
			// 一直從 in channel 抓資料來處理
			for data := range in {
				// 睡個一秒鐘來模擬做事 XD
				time.Sleep(1000 * time.Millisecond)
				// 資料處理完了送出去
				out &amp;lt;- data
			}
		}()
	}

	// 開一個 goroutine 來把要處理的資料放進 in channel
	go func() {
		for _, data := range list {
			in &amp;lt;- fmt.Sprint(data)
		}
		// 資料都塞進 channel 了, 可以關掉了, 不關好像也沒關係?
		close(in)
	}()

	// 等所有的資料處理完再結束
	for _ = range list {
		&amp;lt;-out
	}
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>