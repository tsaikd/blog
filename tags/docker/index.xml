<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Docker on TsaiKD Blog</title>
    <link>http://tsaikd.org/blog/tags/docker/</link>
    <description>Recent content in Docker on TsaiKD Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    
    
    
    
    <lastBuildDate>Thu, 25 Dec 2014 00:00:00 &#43;0000</lastBuildDate>
    <atom:link href="http://tsaikd.org/blog/tags/docker/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Docker Infra 架構簡介與實例</title>
      <link>http://tsaikd.org/blog/2014/12-25-Docker-infra/</link>
      <pubDate>Thu, 25 Dec 2014 00:00:00 &#43;0000</pubDate>
      
      <guid>http://tsaikd.org/blog/2014/12-25-Docker-infra/</guid>
      <description>

&lt;h2 id=&#34;這邊介紹的架構可以做到什麼效果:04c6e90faac2675aa89e2176d2eec7d8&#34;&gt;這邊介紹的架構可以做到什麼效果?&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;開新的 Web App 就可以立刻透過新的 domain name 去連線&lt;/li&gt;
&lt;li&gt;開一大堆同名的 Web App 就可以立刻分流&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;系統基本架構圖:04c6e90faac2675aa89e2176d2eec7d8&#34;&gt;系統基本架構圖&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;overview.png&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/coreos/etcd&#34;&gt;Etcd&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;存放設定的 Cluster DB
&lt;br/&gt;
&lt;br/&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/skynetservices/skydns&#34;&gt;SkyDNS&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;從 &lt;a href=&#34;https://github.com/coreos/etcd&#34;&gt;Etcd&lt;/a&gt; 讀取設定, 讓使用者查詢的 DNS Server&lt;/li&gt;
&lt;li&gt;&lt;img src=&#34;skydns.png&#34; alt=&#34;&#34; /&gt;

&lt;br/&gt;
&lt;br/&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/kelseyhightower/confd&#34;&gt;Confd&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;從 &lt;a href=&#34;https://github.com/coreos/etcd&#34;&gt;Etcd&lt;/a&gt; 讀取設定, Reload &lt;a href=&#34;http://nginx.com&#34;&gt;Nginx&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;img src=&#34;confd.png&#34; alt=&#34;&#34; /&gt;

&lt;br/&gt;
&lt;br/&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/progrium/registrator&#34;&gt;Registrator&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;監聽 &lt;a href=&#34;https://www.docker.io/&#34;&gt;Docker&lt;/a&gt; Events, 將 Container 資訊寫入 &lt;a href=&#34;https://github.com/coreos/etcd&#34;&gt;Etcd&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;img src=&#34;registrator.png&#34; alt=&#34;&#34; /&gt;

&lt;br/&gt;
&lt;br/&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://nginx.com&#34;&gt;Nginx&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;網頁 r-Proxy&lt;/li&gt;
&lt;li&gt;&lt;img src=&#34;queryflow.png&#34; alt=&#34;&#34; /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;實作部份:04c6e90faac2675aa89e2176d2eec7d8&#34;&gt;實作部份&lt;/h2&gt;

&lt;h3 id=&#34;準備-vm-host:04c6e90faac2675aa89e2176d2eec7d8&#34;&gt;準備 VM/Host&lt;/h3&gt;

&lt;p&gt;如果只是要先測試的話, 可以只用一台 VM/Host,
不過考慮到系統容錯的話, 建議準備至少三台不同的機器來建構底層架構&lt;/p&gt;

&lt;h3 id=&#34;設定-docker:04c6e90faac2675aa89e2176d2eec7d8&#34;&gt;設定 &lt;a href=&#34;https://www.docker.io/&#34;&gt;Docker&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;這邊在 &lt;a href=&#34;http://www.ubuntu.com/&#34;&gt;Ubuntu&lt;/a&gt; 上安裝 &lt;a href=&#34;https://www.docker.io/&#34;&gt;Docker&lt;/a&gt; 做為範例, 其他平台請參考&lt;a href=&#34;https://docs.docker.com/&#34;&gt;官網說明文件&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;利用 apt 安裝 lxc-docker&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;echo &amp;quot;deb http://get.docker.io/ubuntu docker main&amp;quot; &amp;gt; /etc/apt/sources.list.d/docker.list
apt-get update
apt-get install lxc-docker
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;開放 tcp 2375 port 方便透過 &lt;a href=&#34;http://tsaikd.org/kdocker-web/&#34;&gt;KDocker-Web&lt;/a&gt; 進行 &lt;a href=&#34;https://www.docker.io/&#34;&gt;Docker&lt;/a&gt; 觀察, 不過正式環境最好不要隨意開放 docker socket port&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;/etc/default/docker&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;DOCKER_OPTS=&amp;quot;$DOCKER_OPTS --api-enable-cors=true -H tcp://0.0.0.0:2375 -H unix:///var/run/docker.sock&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;連線到 &lt;a href=&#34;http://tsaikd.org/kdocker-web/&#34;&gt;KDocker-Web&lt;/a&gt; 進行設定, 這是一個純網頁的 Web App , 在上面進行設定並不會造成資料外洩, 請安心服用&amp;hellip;XD&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;img src=&#34;kdocker-web-config.png&#34; alt=&#34;&#34; /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;用-docker-builder-建立私有的-image:04c6e90faac2675aa89e2176d2eec7d8&#34;&gt;用 &lt;a href=&#34;https://github.com/tsaikd/docker-builder&#34;&gt;Docker-Builder&lt;/a&gt; 建立私有的 image&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;把專案 clone 下來&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;git clone https://github.com/tsaikd/docker-builder
cd docker-builder
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;在設定檔填上自己喜歡的名字, 如果你不想在 &lt;a href=&#34;https://www.docker.io/&#34;&gt;Docker&lt;/a&gt; Image 列表看到一堆 tsaikd 的話&amp;hellip;XD&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;echo &#39;export DOCKER_BASE=&amp;quot;tsaikd&amp;quot;&#39; &amp;gt;&amp;gt; config.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;時區調整一下&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;echo &#39;export TIMEZONE=&amp;quot;Asia/Taipei&amp;quot;&#39; &amp;gt;&amp;gt; config.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;我通常會用 apt proxy 來加快 build 的速度&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;echo &#39;export APT_PROXY=&amp;quot;http://YOUR_APT_PROXY:PORT/&amp;quot;&#39; &amp;gt;&amp;gt; config.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;先從 &lt;a href=&#34;https://registry.hub.docker.com/&#34;&gt;Docker Hub&lt;/a&gt; 抓基本的 Image&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;docker pull ubuntu:14.04
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;把等一下會用到的 image 一次 build 完吧&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;./build.sh ubuntu/stable net-dns/skydns/2.0.1d www-servers/nginx/ppa www-servers/nginx/confd dev-db/etcd/2.0.0-rc.1 sys-docker/registrator/20141218
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;用-fig-來啟動-docker-container:04c6e90faac2675aa89e2176d2eec7d8&#34;&gt;用 &lt;a href=&#34;http://www.fig.sh/&#34;&gt;Fig&lt;/a&gt; 來啟動 Docker Container&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;安裝 &lt;a href=&#34;http://www.fig.sh/&#34;&gt;Fig&lt;/a&gt;, 因為 &lt;a href=&#34;https://github.com/tsaikd/docker-builder&#34;&gt;Docker-Builder&lt;/a&gt; 是利用 bash 當作 entrypoint, 所以需要在啟動 container 時加上 interactive 的參數,
不過目前官方的 &lt;a href=&#34;http://www.fig.sh/&#34;&gt;Fig&lt;/a&gt; 還不支援 interactive 參數, 所以要加上 &lt;a href=&#34;https://github.com/docker/fig/pull/566&#34;&gt;我的 patch&lt;/a&gt;,
也可以從 &lt;a href=&#34;https://github.com/tsaikd/fig/releases/download/1.0.1-KD-2/fig-linux-x64&#34;&gt;這邊&lt;/a&gt; 直接下載執行檔&lt;/li&gt;
&lt;li&gt;建立 &lt;a href=&#34;http://www.fig.sh/&#34;&gt;Fig&lt;/a&gt; 專案目錄&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;mkdir -p /docker-run/Docker01/
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;測試環境&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;VM/Host 01

&lt;ul&gt;
&lt;li&gt;192.168.0.1&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;VM/Host 02

&lt;ul&gt;
&lt;li&gt;192.168.0.2&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;VM/Host 03

&lt;ul&gt;
&lt;li&gt;192.168.0.3&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;網域

&lt;ul&gt;
&lt;li&gt;localnet.local&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;/docker-run/Docker01/fig.yml&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;etcd:
  image: tsaikd/dev-db.etcd:2.0.0-rc.1
  interactive: true
  environment:
    - SERVICE_NAME=etcd
    - ETCD_NAME=infra1
    - ETCD_INITIAL_CLUSTER=infra1=http://192.168.0.1:2380,infra2=http://192.168.0.2:2380,infra3=http://192.168.0.3:2380
    - ETCD_INITIAL_ADVERTISE_PEER_URLS=http://192.168.0.1:2380
    - ETCD_LISTEN_PEER_URLS=http://0.0.0.0:2380
    - ETCD_LISTEN_CLIENT_URLS=http://0.0.0.0:2379,http://0.0.0.0:4001
    - ETCD_ADVERTISE_CLIENT_URLS=http://192.168.0.1:2379,http://192.168.0.1:4001
    - ETCD_DATA_DIR=/default.etcd
    - DOCKER_WAITEXIT=1
  ports:
    - 2379:2379
    - 2380:2380
    - 4001:4001
  volumes:
    - /docker-data/etcd:/default.etcd
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;etcd 如果不想要跑 cluster 的架構也可以&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;registrator:
  image: tsaikd/sys-docker.registrator:20141218
  hostname: Docker01
  interactive: true
  environment:
    - ETCD_TMPL_PROXY={{if .Attrs.proxy}}/reg/proxy/{{.Attrs.proxy}}/{{.Name}}/{{.ID}} {{.Published.HostIP}}:{{.Published.HostPort}}{{end}}
    - ETCD_TMPL_SKYDNS={{if .Attrs.dns}}/skydns/local/localnet/{{.Attrs.dns}}/{{.ID}} {&amp;quot;host&amp;quot;:&amp;quot;{{.Published.HostIP}}&amp;quot;,&amp;quot;port&amp;quot;:{{.Published.HostPort}}}{{end}}
    - ETCD_TMPL_PROXYDNS={{if .Attrs.proxydns}}/skydns/local/localnet/{{.Attrs.proxydns}}/{{.ID}} {&amp;quot;host&amp;quot;:&amp;quot;ngconfd.localnet.local&amp;quot;,&amp;quot;port&amp;quot;:{{.Published.HostPort}}}{{end}}
    - ETCD_TMPL_ALL=/reg/all/{{.Name}}/{{.ID}} {{.Published.HostIP}}:{{.Published.HostPort}}
    - REGISTRATOR_OPTS=-ip 192.168.0.1 etcd-tmpl://192.168.0.1:4001/
    - DOCKER_WAITEXIT=1
  volumes:
    - /var/run/docker.sock:/var/run/docker.sock:ro
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/progrium/registrator&#34;&gt;Registrator&lt;/a&gt; 目前原作者版本還沒支援 ETCD_TMPL 的用法, 要用 &lt;a href=&#34;https://github.com/bheatwole/registrator&#34;&gt;bheatwole&lt;/a&gt; 版本,
相關的 patch 請參考&lt;a href=&#34;https://github.com/progrium/registrator/pull/76&#34;&gt;這裡&lt;/a&gt;,
我也有在 GitHub 上放了&lt;a href=&#34;https://github.com/tsaikd/registrator/releases/download/20141218/registrator-linux-amd64&#34;&gt;執行檔&lt;/a&gt;,
如果是用 &lt;a href=&#34;https://github.com/tsaikd/docker-builder&#34;&gt;Docker-Builder&lt;/a&gt; 建立 Image 的話, 應該就沒啥問題&lt;/li&gt;
&lt;li&gt;因為 &lt;a href=&#34;https://github.com/progrium/registrator&#34;&gt;Registrator&lt;/a&gt; 需要監聽 &lt;a href=&#34;https://www.docker.io/&#34;&gt;Docker&lt;/a&gt; 的事件, 所以要把 &lt;a href=&#34;https://www.docker.io/&#34;&gt;Docker&lt;/a&gt; socket file 掛進 &lt;a href=&#34;https://github.com/progrium/registrator&#34;&gt;Registrator&lt;/a&gt; 的 container&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;skydns:
  image: tsaikd/net-dns.skydns:2.0.1d
  interactive: true
  environment:
    - SERVICE_NAME=skydns
    - ETCD_MACHINES=http://192.168.0.1:4001
    - SKYDNS_DOMAIN=localnet.local
    - SKYDNS_NAMESERVERS=8.8.8.8:53
    - SKYDNS_ADDR=0.0.0.0:1053
    - SKYDNS_OPTS=-verbose
    - DOCKER_WAITEXIT=1
  ports:
    - 53:1053/udp
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;ngconfd:
  image: tsaikd/www-servers.nginx:confd
  interactive: true
  environment:
    - SERVICE_NAME=ngconfd
    - SERVICE_80_DNS=ngconfd
    - CONFD_OPTS=-node 192.168.0.1:4001 -verbose -interval=5
    - DOCKER_WAITEXIT=1
  ports:
    - 80:80
    - 443:443
  volumes:
    - ngconfd/confd:/etc/confd
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://nginx.com&#34;&gt;Nginx&lt;/a&gt; + &lt;a href=&#34;https://github.com/kelseyhightower/confd&#34;&gt;Confd&lt;/a&gt; 還需要額外的設定檔&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;/docker-run/Docker01/ngconfd/confd/conf.d/nginx.toml&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;[template]
src = &amp;quot;nginx.tmpl&amp;quot;
dest = &amp;quot;/etc/nginx/sites-enabled/default&amp;quot;
prefix = &amp;quot;/reg&amp;quot;
keys = [
    &amp;quot;/proxy&amp;quot;,
]
check_cmd = &amp;quot;/usr/sbin/nginx -t -c /etc/nginx/nginx.conf&amp;quot;
reload_cmd = &amp;quot;/usr/sbin/service nginx reload&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;nginx.tmpl.txt&#34;&gt;/docker-run/Docker01/ngconfd/confd/templates/nginx.tmpl&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;這個檔案格式比較特別, 所以另外放&amp;hellip;@_@&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;啟動 container&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;fig up -d etcd
fig up -d registrator
fig up -d skydns
fig up -d ngconfd
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;把 DNS 指向 &lt;a href=&#34;https://github.com/skynetservices/skydns&#34;&gt;SkyDNS&lt;/a&gt; 吧 (192.168.0.1:53)&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;vi /etc/resolv.conf
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;大功告成:04c6e90faac2675aa89e2176d2eec7d8&#34;&gt;大功告成&lt;/h3&gt;

&lt;p&gt;開個 Web App 的 container 出來試看看效果吧, 這邊拿 &lt;a href=&#34;http://www.elasticsearch.org/&#34;&gt;ElasticSearch&lt;/a&gt; 來試,
因為每個 &lt;a href=&#34;http://www.elasticsearch.org/&#34;&gt;ElasticSearch&lt;/a&gt; 的畫面都會顯示一個特別的名字&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;fig.yml&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;estest:
  image: tsaikd/app-misc.elasticsearch:1.4.1
  interactive: true
  environment:
    - SERVICE_NAME=estest
    - SERVICE_9200_PROXYDNS=estest
    - SERVICE_9200_PROXY=http
  ports:
    - 9200
    - 9300
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;開起來看看&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;fig up -d estest
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;用瀏覽器連看看&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;curl http://estest.localnet.local/
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;多開幾台&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;fig scale estest=3
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;再用瀏覽器連看看, 多連幾次看看有什麼不一樣&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;curl http://estest.localnet.local/
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;如果是跑一般的網站 Container 的話, 在 Chrome 裡面是可以觀察到 HTTP Connection 是會分散到多台 &lt;a href=&#34;http://nginx.com&#34;&gt;Nginx&lt;/a&gt;,
像是 HTML 從 192.168.0.1 抓, JavaScript 從 192.168.0.2 抓之類的行為&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;版本參考:04c6e90faac2675aa89e2176d2eec7d8&#34;&gt;版本參考&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.ubuntu.com/&#34;&gt;Ubuntu&lt;/a&gt; 14.04 amd64&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.docker.io/&#34;&gt;Docker&lt;/a&gt; 1.4.1&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Consul 採到雷</title>
      <link>http://tsaikd.org/blog/2014/09-14-Consul-trap/</link>
      <pubDate>Sun, 14 Sep 2014 00:00:00 &#43;0000</pubDate>
      
      <guid>http://tsaikd.org/blog/2014/09-14-Consul-trap/</guid>
      <description>

&lt;p&gt;今天試用 &lt;a href=&#34;http://www.consul.io/&#34;&gt;consul&lt;/a&gt; ，
看網路上的文件好像還蠻好裝的，
沒想到還是遇到神奇的雷，
目前懷疑是跟 &lt;a href=&#34;http://zfsonlinux.org/&#34;&gt;ZFS&lt;/a&gt; 有關。&lt;/p&gt;

&lt;h2 id=&#34;環境:04c6e90faac2675aa89e2176d2eec7d8&#34;&gt;環境&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;$ uname -rsvmo
Linux 3.13.0-35-generic #62-Ubuntu SMP Fri Aug 15 01:58:42 UTC 2014 x86_64 GNU/Linux
$ docker -v
Docker version 1.2.0, build fa7b24f
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://www.consul.io/&#34;&gt;consul&lt;/a&gt; 版本是 v0.4.0&lt;/p&gt;

&lt;h2 id=&#34;現象:04c6e90faac2675aa89e2176d2eec7d8&#34;&gt;現象&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;$ docker run progrium/consul -server -bootstrap
==&amp;gt; WARNING: Bootstrap mode enabled! Do not enable unless necessary
==&amp;gt; WARNING: It is highly recommended to set GOMAXPROCS higher than 1
==&amp;gt; Starting Consul agent...
==&amp;gt; Error starting agent: Failed to start Consul server: Failed to start Raft: index id error: Function not implemented
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;啟動 &lt;a href=&#34;http://www.consul.io/&#34;&gt;consul&lt;/a&gt; 就爆炸了&amp;hellip;.&amp;gt;_&amp;lt;&lt;/p&gt;

&lt;p&gt;google 不到什麼有用的資料，
只好自己 trace code 了&amp;hellip;Orz&lt;/p&gt;

&lt;p&gt;追了大半天，
發現問題出在 &lt;a href=&#34;http://www.consul.io/&#34;&gt;consul&lt;/a&gt; call &lt;a href=&#34;http://symas.com/mdb/&#34;&gt;LMDB&lt;/a&gt; (Lightning Memory-Mapped Database) 的時候會死掉。
目前懷疑跟 &lt;a href=&#34;http://zfsonlinux.org/&#34;&gt;ZFS&lt;/a&gt; 不支援 AIO 有關，
因為 MySQL 跑在 &lt;a href=&#34;http://zfsonlinux.org/&#34;&gt;ZFS&lt;/a&gt; 上也有&lt;a href=&#34;https://answers.launchpad.net/ubuntu/+question/249586&#34;&gt;災情&lt;/a&gt;。&lt;/p&gt;

&lt;h2 id=&#34;解法:04c6e90faac2675aa89e2176d2eec7d8&#34;&gt;解法&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;$ docker run -v /tmp progrium/consul -server -bootstrap
==&amp;gt; WARNING: Bootstrap mode enabled! Do not enable unless necessary
==&amp;gt; WARNING: It is highly recommended to set GOMAXPROCS higher than 1
==&amp;gt; Starting Consul agent...
==&amp;gt; Starting Consul agent RPC...
==&amp;gt; Consul agent running!
         Node name: &#39;300bcce55b48&#39;
        Datacenter: &#39;dc1&#39;
            Server: true (bootstrap: true)
       Client Addr: 0.0.0.0 (HTTP: 8500, DNS: 53, RPC: 8400)
      Cluster Addr: 172.17.0.82 (LAN: 8301, WAN: 8302)
    Gossip encrypt: false, RPC-TLS: false, TLS-Incoming: false
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;為什麼要掛 /tmp ？&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;這應該是 &lt;a href=&#34;http://www.consul.io/&#34;&gt;consul&lt;/a&gt; 的問題了，
他在啟動的時候會跑去 /tmp 建 &lt;a href=&#34;http://symas.com/mdb/&#34;&gt;LMDB&lt;/a&gt; ，
即使你有設定 -data-dir 也一樣。
(雷~~~~)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Docker eclipse on Ubuntu Desktop</title>
      <link>http://tsaikd.org/blog/2014/08-04-Docker-eclipse-on-Ubuntu-Desktop/</link>
      <pubDate>Mon, 04 Aug 2014 00:00:00 &#43;0000</pubDate>
      
      <guid>http://tsaikd.org/blog/2014/08-04-Docker-eclipse-on-Ubuntu-Desktop/</guid>
      <description>&lt;p&gt;看到越來越多人在往雲端開發的方向在玩，
比較終極的做法當然就是把 Browser 變成 IDE ，
不過就目前看來，
技術上還沒有一個比較領先的做法，
只好先找比較無痛的方向來玩玩&amp;hellip;hehehe&lt;/p&gt;

&lt;p&gt;今天嘗試了一個新的做法，
在 Ubuntu Desktop 上面裝 docker ，
在 docker 裡面跑 eclipse 來開發，
這樣做的目的是要讓本機的開發環境不要裝太多雜七雜八的東西，
先看一下成功的畫面吧！&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;screen01.png&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;screen02.png&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;基本上就是先建一個 eclipse 的 container ，
跑起來之後再用 ssh 連進去執行 eclipse ，
需要 ssh 的原因是為了要把本機的 X11 forwarding 過去，
本來還有 google 到用 mount 的的辦法去達成 X11 forwarding ，
不過試了一陣子都搞不定，
只好先暫時放棄了。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Try CoreOS</title>
      <link>http://tsaikd.org/blog/2014/07-10-Try-CoreOS/</link>
      <pubDate>Thu, 10 Jul 2014 00:00:00 &#43;0000</pubDate>
      
      <guid>http://tsaikd.org/blog/2014/07-10-Try-CoreOS/</guid>
      <description>

&lt;p&gt;新玩具 &lt;a href=&#34;https://coreos.com/&#34;&gt;CoreOS&lt;/a&gt; ，設計理念跟 &lt;a href=&#34;http://www.ubuntu.com/&#34;&gt;Ubuntu&lt;/a&gt; 差蠻多的，
光是安裝就花了不少時間在試，記錄一下奇怪的雷。
幾個重點先說一下：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://coreos.com/docs/cluster-management/setup/cloudinit-cloud-config/&#34;&gt;Cloud-Config&lt;/a&gt; 最前面的 &lt;code&gt;#cloud-config&lt;/code&gt; 不能省&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://coreos.com/docs/cluster-management/setup/cloudinit-cloud-config/&#34;&gt;Cloud-Config&lt;/a&gt; 請按照官方文件上面的範例寫，不要畫蛇添足&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://coreos.com/docs/cluster-management/setup/cloudinit-cloud-config/&#34;&gt;Cloud-Config&lt;/a&gt; 會放在 /var/lib/coreos-install/user_data ，文件上說每次開機都會跑，但是 user 已經存在的話就不會再加一次&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;下面是安裝過程，已經有簡化一些了還是落落長，最後設定請直接 END&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;先開個-vm-試試-一號機:04c6e90faac2675aa89e2176d2eec7d8&#34;&gt;先開個 VM 試試 (一號機)&lt;/h1&gt;

&lt;p&gt;在 &lt;a href=&#34;https://coreos.com/docs/running-coreos/bare-metal/installing-to-disk/&#34;&gt;Installing CoreOS to Disk&lt;/a&gt;
看到有趣的安裝 script ，
用 &lt;a href=&#34;http://www.sysresccd.org/&#34;&gt;SystemRescueCD&lt;/a&gt; 開機之後，
抓 &lt;a href=&#34;https://raw.githubusercontent.com/coreos/init/master/bin/coreos-install&#34;&gt;coreos-install&lt;/a&gt; 下來，
執行 &lt;code&gt;coreos-install -d /dev/sda&lt;/code&gt; ，
然後他會下載一百多 MB 的檔案來裝到硬碟，
一切順利，重開機，登入，預設帳密是啥？&lt;/p&gt;

&lt;p&gt;嗯～～看來是要用 &lt;a href=&#34;https://coreos.com/docs/cluster-management/setup/cloudinit-cloud-config/&#34;&gt;Cloud-Config&lt;/a&gt; 來初始化個人設定，該重裝了～～
感覺好像會重裝很多次，每次都要下載一百多 MB 好像有點浪費頻寬，
&lt;a href=&#34;http://www.squid-cache.org/&#34;&gt;squid&lt;/a&gt; 該你出場了！&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;重開-vm-進-systemrescuecd-環境-二號機:04c6e90faac2675aa89e2176d2eec7d8&#34;&gt;重開 VM 進 &lt;a href=&#34;http://www.sysresccd.org/&#34;&gt;SystemRescueCD&lt;/a&gt; 環境 (二號機)&lt;/h1&gt;

&lt;p&gt;設定 http_proxy ，
抓 &lt;a href=&#34;https://raw.githubusercontent.com/coreos/init/master/bin/coreos-install&#34;&gt;coreos-install&lt;/a&gt; 下來，
寫 cloud-config.yaml&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ssh_authorized_keys:
  - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC0g+ZTxC7weoIJLUafOgrm+h...
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;coreos-install -d /dev/sda -c cloud-config.yaml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;重開之後，用 SSH 登不進去？ &amp;hellip; WTF &amp;hellip;
是不是要直接加帳號才對？&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;重開-vm-進-systemrescuecd-環境-三號機:04c6e90faac2675aa89e2176d2eec7d8&#34;&gt;重開 VM 進 &lt;a href=&#34;http://www.sysresccd.org/&#34;&gt;SystemRescueCD&lt;/a&gt; 環境 (三號機)&lt;/h1&gt;

&lt;p&gt;設定 http_proxy ，
抓 &lt;a href=&#34;https://raw.githubusercontent.com/coreos/init/master/bin/coreos-install&#34;&gt;coreos-install&lt;/a&gt; 下來，
寫 cloud-config.yaml&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;users:
  - name: elroy
    passwd: $6$5s2u6/jR$un0AvWnqilcgaNB3Mkxd5yYv6mTlWfOoCYHZmfi3LDKVltj.E8XNKEcwWm...
    groups:
      - sudo
      - docker
    ssh-authorized-keys:
      - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC0g+ZTxC7weoIJLUafOgrm+h...
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;coreos-install -d /dev/sda -c cloud-config.yaml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;怎麼又從 internet 下載一百多 MB 的檔案&amp;hellip;
&lt;a href=&#34;http://www.squid-cache.org/&#34;&gt;squid&lt;/a&gt; 是壞掉了嗎？
開始檢查 &lt;a href=&#34;http://www.squid-cache.org/&#34;&gt;squid&lt;/a&gt; 設定，&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;refresh_pattern -i \.(rpm|cab|deb|exe|msi|msu|zip|tar|xz|bz|bz2|lzma|gz|tgz|rar|bin|7z|doc?|xls?|ppt?|pdf|nth|psd|sis)$ 10080 90% 43200 override-expire override-lastmod reload-into-ims ignore-no-cache ignore-private
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;應該 OK 啊！
試一下 &lt;code&gt;wget http://free.nchc.org.tw/ubuntu/ls-lR.gz&lt;/code&gt; ，
沒問題啊，搗鼓半小時後放棄 &lt;a href=&#34;http://www.squid-cache.org/&#34;&gt;squid&lt;/a&gt; 方案，
直接改 &lt;a href=&#34;https://raw.githubusercontent.com/coreos/init/master/bin/coreos-install&#34;&gt;coreos-install&lt;/a&gt; 比較快，
把&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/coreos/init/master/bin/coreos-install&#34;&gt;coreos-install&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://beta.release.core-os.net/amd64-usr/current/coreos_production_image.bin.bz2&#34;&gt;http://beta.release.core-os.net/amd64-usr/current/coreos_production_image.bin.bz2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://beta.release.core-os.net/amd64-usr/current/coreos_production_image.bin.bz2.sig&#34;&gt;http://beta.release.core-os.net/amd64-usr/current/coreos_production_image.bin.bz2.sig&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;放到區網的 Web Site ，
修改 &lt;a href=&#34;https://raw.githubusercontent.com/coreos/init/master/bin/coreos-install&#34;&gt;coreos-install&lt;/a&gt; ，
噢，剛剛好像有試裝一次 &lt;a href=&#34;https://coreos.com/&#34;&gt;CoreOS&lt;/a&gt; ，都還沒看成果就跑題了，該重開機了。&lt;/p&gt;

&lt;p&gt;SSH 登不進去，密碼也登不進去，這 &lt;a href=&#34;https://coreos.com/&#34;&gt;CoreOS&lt;/a&gt; 也太渣了吧！
那個設定檔怎麼好像不太整齊， user 下面的子項目怎麼只有 name 前面有 &lt;code&gt;-&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;重開-vm-進-systemrescuecd-環境-四號機:04c6e90faac2675aa89e2176d2eec7d8&#34;&gt;重開 VM 進 &lt;a href=&#34;http://www.sysresccd.org/&#34;&gt;SystemRescueCD&lt;/a&gt; 環境 (四號機)&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;users:
  - name: elroy
  - passwd: $6$5s2u6/jR$un0AvWnqilcgaNB3Mkxd5yYv6mTlWfOoCYHZmfi3LDKVltj.E8XNKEcwWm...
  - groups:
      - sudo
      - docker
  - ssh-authorized-keys:
      - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC0g+ZTxC7weoIJLUafOgrm+h...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;SSH 登不進去，密碼也登不進去，
應該是哪裡出了問題，會不會是我的設定檔他根本不吃！&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;重開-vm-進-systemrescuecd-環境-五號機:04c6e90faac2675aa89e2176d2eec7d8&#34;&gt;重開 VM 進 &lt;a href=&#34;http://www.sysresccd.org/&#34;&gt;SystemRescueCD&lt;/a&gt; 環境 (五號機)&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;hostname: coreos-test
users:
  - name: elroy
  - passwd: $6$5s2u6/jR$un0AvWnqilcgaNB3Mkxd5yYv6mTlWfOoCYHZmfi3LDKVltj.E8XNKEcwWm...
  - groups:
      - sudo
      - docker
  - ssh-authorized-keys:
      - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC0g+ZTxC7weoIJLUafOgrm+h...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;果然連 hostname 都沒吃到，重新多看幾次文件，每個範例好像前面都有加 &lt;code&gt;#cloud-config&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;重開-vm-進-systemrescuecd-環境-六號機:04c6e90faac2675aa89e2176d2eec7d8&#34;&gt;重開 VM 進 &lt;a href=&#34;http://www.sysresccd.org/&#34;&gt;SystemRescueCD&lt;/a&gt; 環境 (六號機)&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;#cloud-config

hostname: coreos-test
users:
  - name: elroy
  - passwd: $6$5s2u6/jR$un0AvWnqilcgaNB3Mkxd5yYv6mTlWfOoCYHZmfi3LDKVltj.E8XNKEcwWm...
  - groups:
      - sudo
      - docker
  - ssh-authorized-keys:
      - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC0g+ZTxC7weoIJLUafOgrm+h...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;這次 hostname 有吃到了，
不過還是登不進去啊！
等等文件上有說&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;The ssh_authorized_keys parameter adds public SSH keys which will be authorized for the core user.
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;重開-vm-進-systemrescuecd-環境-七號機:04c6e90faac2675aa89e2176d2eec7d8&#34;&gt;重開 VM 進 &lt;a href=&#34;http://www.sysresccd.org/&#34;&gt;SystemRescueCD&lt;/a&gt; 環境 (七號機)&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;#cloud-config

hostname: coreos-test
ssh-authorized-keys:
  - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC0g+ZTxC7weoIJLUafOgrm+h...
users:
  - name: elroy
  - passwd: $6$5s2u6/jR$un0AvWnqilcgaNB3Mkxd5yYv6mTlWfOoCYHZmfi3LDKVltj.E8XNKEcwWm...
  - groups:
      - sudo
      - docker
  - ssh-authorized-keys:
      - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC0g+ZTxC7weoIJLUafOgrm+h...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;SSH core 這個 user 終於進去了！
不過新建的 user 還是不行。
等等，我剛剛好像有把設定檔的格式加了幾個 &lt;code&gt;-&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;重開-vm-進-systemrescuecd-環境-八號機:04c6e90faac2675aa89e2176d2eec7d8&#34;&gt;重開 VM 進 &lt;a href=&#34;http://www.sysresccd.org/&#34;&gt;SystemRescueCD&lt;/a&gt; 環境 (八號機)&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;#cloud-config

hostname: coreos-test
ssh-authorized-keys:
  - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC0g+ZTxC7weoIJLUafOgrm+h...
users:
  - name: elroy
    passwd: $6$5s2u6/jR$un0AvWnqilcgaNB3Mkxd5yYv6mTlWfOoCYHZmfi3LDKVltj.E8XNKEcwWm...
    groups:
      - sudo
      - docker
    ssh-authorized-keys:
      - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC0g+ZTxC7weoIJLUafOgrm+h...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;終於進去了！接下來就是要把 &lt;a href=&#34;https://github.com/tsaikd/kdocker-web&#34;&gt;kdocker-web&lt;/a&gt; 接上去了。&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;重開-vm-進-systemrescuecd-環境-九號機:04c6e90faac2675aa89e2176d2eec7d8&#34;&gt;重開 VM 進 &lt;a href=&#34;http://www.sysresccd.org/&#34;&gt;SystemRescueCD&lt;/a&gt; 環境 (九號機)&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;#cloud-config

hostname: coreos-test
ssh-authorized-keys:
  - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC0g+ZTxC7weoIJLUafOgrm+h...
users:
  - name: elroy
    passwd: $6$5s2u6/jR$un0AvWnqilcgaNB3Mkxd5yYv6mTlWfOoCYHZmfi3LDKVltj.E8XNKEcwWm...
    groups:
      - sudo
      - docker
    ssh-authorized-keys:
      - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC0g+ZTxC7weoIJLUafOgrm+h...
coreos:
  units:
    - name: docker.service
      command: restart
      content: |
        [Unit]
        Description=Docker Application Container Engine
        Documentation=http://docs.docker.io

        [Service]
        Environment=&amp;quot;TMPDIR=/var/tmp/&amp;quot;
        ExecStartPre=/bin/mount --make-rprivate /
        # Run docker but don&#39;t have docker automatically restart
        # containers. This is a job for systemd and unit files.
        ExecStart=/usr/bin/docker -d -s=btrfs -r=false -H fd:// --api-enable-cors=true

        [Install]
        WantedBy=multi-user.target
    - name: docker-tcp.socket
      command: start
      content: |
        [Unit]
        Description=Docker Socket for the API

        [Socket]
        ListenStream=4243
        Service=docker.service
        BindIPv6Only=both

        [Install]
        WantedBy=sockets.target
    - name: enable-docker-tcp.service
      command: start
      content: |
        [Unit]
        Description=Enable the Docker Socket for the API

        [Service]
        Type=oneshot
        ExecStart=/usr/bin/systemctl enable docker-tcp.socket
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;大功告成！&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Docker container bridge host physical network</title>
      <link>http://tsaikd.org/blog/2014/05-24-Docker-container-bridge-host-physical-network/</link>
      <pubDate>Sat, 24 May 2014 00:00:00 &#43;0000</pubDate>
      
      <guid>http://tsaikd.org/blog/2014/05-24-Docker-container-bridge-host-physical-network/</guid>
      <description>

&lt;p&gt;想把 docker 拿來當 vm 用的話，有一個問題就是目前 docker 要做 port forwarding 還是有點麻煩，
比較好的辦法應該是 container 有自己的獨立 IP ，這樣的話就可以不用管 port 的問題了。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/jpetazzo/pipework&#34;&gt;https://github.com/jpetazzo/pipework&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;把上面這個 project clone 到 docker host，這個 project 的主要功能是在幫助設定 container 的網路，
詳細的內容請參考網頁。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://noyaudolive.net/2012/05/09/lxc-and-macvlan-host-to-guest-connection/&#34;&gt;http://noyaudolive.net/2012/05/09/lxc-and-macvlan-host-to-guest-connection/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;另外會遇到 host ping 不到 container 的情況，建議用上面這個辦法解決。&lt;/p&gt;

&lt;h1 id=&#34;實驗環境:04c6e90faac2675aa89e2176d2eec7d8&#34;&gt;實驗環境&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Gateway 192.168.1.1&lt;/li&gt;
&lt;li&gt;Netmask 255.255.255.0&lt;/li&gt;
&lt;li&gt;Docker host 192.168.1.10 eth0&lt;/li&gt;
&lt;li&gt;Docker container 192.168.1.50&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;docker-host:04c6e90faac2675aa89e2176d2eec7d8&#34;&gt;Docker host&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;vmid=&amp;quot;$(docker run -i -t -d --net none ubuntu:14.04 /bin/bash)&amp;quot;
pipework eth0 -i eth0 &amp;quot;${vmid}&amp;quot; 192.168.1.50/24@192.168.1.1
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;pipework 第一個 eth0 是指 host 的網卡代號&lt;/li&gt;
&lt;li&gt;pipework 第二個 eth0 是指 container 的網卡代號，因為 &amp;ndash;net none 把網卡拿掉，
所以 container 網卡代號從 eth0 開始&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>phpVirtualbox</title>
      <link>http://tsaikd.org/blog/2014/02-08-phpvirtualbox/</link>
      <pubDate>Sat, 08 Feb 2014 00:00:00 &#43;0000</pubDate>
      
      <guid>http://tsaikd.org/blog/2014/02-08-phpvirtualbox/</guid>
      <description>&lt;p&gt;過年期間買了新的 PC 內裝(CPU, 主機板, 記憶體)&lt;/p&gt;

&lt;p&gt;最近終於決定 OS 的架構了&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ubuntu 12.04 x64&lt;/li&gt;
&lt;li&gt;ZFS&lt;/li&gt;
&lt;li&gt;Virtualbox&lt;/li&gt;
&lt;li&gt;Docker&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;img src=&#34;01.png&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;32G RAM 的 PC &amp;hellip;.hehehe&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;img src=&#34;02.png&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Ubuntu 選 LTS 版, 必免頻繁 Upgrade 的問題&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;img src=&#34;03.png&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;04.png&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;ZFS, 實驗性質, 看看大量使用會不會有什麼鬼問題, 不過 ZFS 在 Ubuntu 感覺還是有點雷, 用預設的 properties 會狂吃記憶體, 傳檔案竟然會吃到 2x G, 目前把所有的硬碟 cache 選項關掉, 把壓縮關掉, 看起來還正常一點&amp;hellip;&amp;gt;_&amp;lt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;img src=&#34;05.png&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;06.png&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Docker, 去年年底才知道的好東西, linux base 的 vm 之後都可以轉到 docker 跑了, 不過之前用的 shipyard 管理界面在改版之後變得有點討厭, 限定要用 shipyard agent 才能管理 docker, 目前只好回到 console 去管理了, 看看有沒有時間弄個簡易的 web 管理界面好了&amp;hellip;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;img src=&#34;07.png&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;08.png&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;09.png&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;10.png&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;11.png&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;12.png&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;13.png&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;14.png&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;15.png&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;16.png&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;17.png&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Virtualbox, 本來想試用 KVM + openstack 的, 但是搞了半天還是搞不定, 只好回到 virtualbox 了, 重點是, 發現了一個叫 phpvirtualbox 的 project, 可以不用裝 GUI 來看 virtualbox 的設定界面了, 大推!!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>